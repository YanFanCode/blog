import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-a0004c3b.js";const t={},p=e(`<p>在 javascript 中，this 是一个很重要的概念，它的指向是动态的，根据函数的调用方式不同而不同。</p><h2 id="指向特点" tabindex="-1"><a class="header-anchor" href="#指向特点" aria-hidden="true">#</a> 指向特点</h2><p>在实际编写代码中，关于 this 的指向我们可以总结出来以下四个特性：</p><ul><li>函数在调用的时候，JavaScript 会自动为函数添加一个隐式参数 this，this 指向函数的调用者。</li><li>this 的绑定跟函数的声明位置没有任何关系。</li><li>this 的指向在函数调用的时候才能确定。</li><li>this 是在运行时进行绑定的，而不是在编写时绑定，它的上下文取决于函数调用时的各种条件。</li></ul><h2 id="全局上下文" tabindex="-1"><a class="header-anchor" href="#全局上下文" aria-hidden="true">#</a> 全局上下文</h2><p>无论是否处于严格模式，全局上下文中的 this 都指向全局对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="绑定规则" tabindex="-1"><a class="header-anchor" href="#绑定规则" aria-hidden="true">#</a> 绑定规则</h2><p>在函数上下文中，this 指向取决于函数的调用方式，一共分为四种。</p><ul><li>默认绑定</li><li>隐式绑定</li><li>显式绑定</li><li>new 绑定</li></ul><h3 id="默认绑定" tabindex="-1"><a class="header-anchor" href="#默认绑定" aria-hidden="true">#</a> 默认绑定</h3><p>默认绑定即为独立函数调用，可以理解为没有绑定到某个对象上进行调用。</p><p>严格模式和非严格模式下 this 的指向会有所不同。</p><p>非严格模式下，独立调用函数的 this 指向为全局对象，在浏览器中为 window，node 中为 global。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span>
<span class="token punctuation">}</span>

f1 <span class="token operator">===</span> window <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而严格模式下，独立调用函数的 this 指向为 <code>undefined</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">&#39;use strict&#39;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span>
<span class="token punctuation">}</span>
f2 <span class="token operator">===</span> window <span class="token comment">//false</span>
f2 <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="隐式绑定" tabindex="-1"><a class="header-anchor" href="#隐式绑定" aria-hidden="true">#</a> 隐式绑定</h3><p>通过对象发起的调用，this 会指向调用者本身。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 案例一</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;yanfan&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">bar</span><span class="token operator">:</span> foo
<span class="token punctuation">}</span>

obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// this yanfan 此时foo函数中this指向obj对象</span>

<span class="token keyword">const</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// this undefined 此时foo函数中this指向window对象</span>

<span class="token comment">// 案例二</span>
<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;yanfan&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">bar</span><span class="token operator">:</span> foo
<span class="token punctuation">}</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;fanyan&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">bar</span><span class="token operator">:</span> obj1<span class="token punctuation">.</span>bar
<span class="token punctuation">}</span>

obj2<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// this fanyan 此时foo函数中this指向obj2对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="显式绑定" tabindex="-1"><a class="header-anchor" href="#显式绑定" aria-hidden="true">#</a> 显式绑定</h3><p>当我们不想费力去分析调用位置，只想在函数调用的时候固定 this 的指向，这时候我们可以使用显式绑定。</p><p>JavaScript 提供了三个改变 this 指向的函数：<code>call()</code>、<code>apply()</code> 和 <code>bind()</code>。它们都能改变 this 指向，但是都有一些细微的区别。</p><h3 id="new-绑定" tabindex="-1"><a class="header-anchor" href="#new-绑定" aria-hidden="true">#</a> new 绑定</h3><p>使用 new 操作符调用构造函数生成对象时，会自动执行以下操作：</p><ol><li>创建一个新的空对象；</li><li>这个对象的 <code>[[proto]]</code> 属性会被赋值为构造函数的 <code>prototype</code> 属性；</li><li>将 this 指向这个新对象；</li><li>执行构造函数内部代码；</li><li>如果没有显式返回对象，则默认返回刚刚创建的新对象；</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// Person { name: &#39;yanfan&#39;, sayName: [Function (anonymous)] }</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;yanfan&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),o=[p];function i(c,l){return s(),a("div",null,o)}const u=n(t,[["render",i],["__file","01_this的指向.html.vue"]]);export{u as default};

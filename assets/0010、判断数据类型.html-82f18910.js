import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-067d7015.js";const o={},t=e(`<p><code>ECMAScript</code> 有 8 种基本的数据类型（ 7 种原始类型和 1 种引用类型）。</p><ul><li>原始类型：<code>Number</code>、<code>BigInt</code>、<code>String</code>、<code>Boolean</code>、<code>Null</code>、<code>Undefined</code>、<code>Symbol</code></li><li>引用类型：<code>Object</code></li></ul><p>不同的数据存放在不同的空间中：</p><ul><li>栈空间：JavaScript 对于<strong>基本数据类型</strong>内存的分配会在执行时直接在栈空间进行分配；</li><li>堆空间：JavaScript 对于<strong>复杂数据类型</strong>内存的分配会在堆内存中开辟一块空间，并且将这块空间的指针（地址）返回给变量引用（存放在栈空间）。</li></ul><p>这么做的原因是 JS 引擎需要用栈来维护程序执行期间上下文的状态，如果栈空间分配的内存过大，那么会影响到上下文切换的效率，从而导致代码执行速度过慢。</p><p>因此，栈空间不会设置太大，主要用来存放基本数据类型（占用空间小），而像复杂数据类型，因为他们的占用空间一般较大，因此会被存放在堆空间中。</p><h2 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> <code>typeof</code></h2><p>用来返回操作数类型的字符串。语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> operand
<span class="token comment">// or</span>
<span class="token keyword">typeof</span> <span class="token punctuation">(</span>operand<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是由于 JavaScript 设计的缺陷，<code>typeof</code> 基本上不能得到想要的结果。它只有一个实际应用场景：<strong>检测一个对象是否已经定义或者是否已经赋值</strong>。</p><p>特点：</p><ul><li>对于基本类型，除 <code>null</code> 外，均可以返回正确结果；</li><li>对于引用类型，除 <code>function</code> 外，一律返回 <code>&quot;object&quot;</code>；</li><li>对于 <code>null</code>，返回 <code>&quot;object&quot;</code> 类型；</li><li>对于 <code>function</code>，返回 <code>&quot;function&quot;</code>。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">typeof</span> <span class="token keyword">null</span>       <span class="token comment">// &quot;object&quot;，得不到想要的值</span>
<span class="token keyword">typeof</span> fn         <span class="token comment">// &quot;function&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总之，数组、对象、null 都会返回 <code>object</code>，其他都能判断正确。</p><blockquote><p>由于 JavaScript 第一个版本中，所有值都存在 32 位单元中，每个单元包含一个小的类型标签以及存储的真实值，object 的类型标签是 <code>000</code>，而 null 的类型标签也是 <code>000</code>，因此使用 typeof 判断 null 会被判定为 object。</p></blockquote><h2 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof" aria-hidden="true">#</a> <code>instanceof</code></h2><p>用来检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上，返回布尔值。语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>object <span class="token keyword">instanceof</span> <span class="token class-name">constructor</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>特点：</p><ul><li>对于<strong>字面量声明</strong>的 <code>Number</code>、<code>BigInt</code>、<code>String</code>、<code>Boolean</code>、<code>Symbol</code> 都会返回 <code>false</code>；</li><li><strong>只能正确判断引用数据类型</strong>；</li><li>只要在当前实例的原型链上，检测结果均为 <code>true</code>；</li></ul><p>原理：遍历实例对象的原型链 <code>__proto__</code>，直到找到构造函数的 <code>prototype</code> 属性。</p><blockquote><p>不同环境对 <code>__proto__</code> 的实现不同，而且 Web 标准已经删除该特性，这里只是为了表示方便，真实开发中需要使用 <code>Object.getPrototypeOf()</code> 获取原型对象。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myInstanceOf</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在 ES5 中，如果 Object.getPrototypeOf 参数不是一个对象类型</span>
  <span class="token comment">// 将抛出一个TypeError异常。在 ES2015 中，参数会被强制转换为一个 Object。</span>
  <span class="token comment">// 因此需提前判断是否为引用类型</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> left <span class="token operator">!==</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> left <span class="token operator">!==</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>

  <span class="token comment">// 获取实例对象的原型</span>
  <span class="token keyword">let</span> proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>proto <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>proto <span class="token operator">===</span> right<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>
    proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getProtypeOf</span><span class="token punctuation">(</span>proto<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="准确判断数据类型" tabindex="-1"><a class="header-anchor" href="#准确判断数据类型" aria-hidden="true">#</a> 准确判断数据类型</h2><p>如果只需要准确判断六种基本数据类型，同时又能够准确区分数据类型是 <code>null</code>、<code>array</code>、还是 <code>object</code> 就足够的话，那么我们可以这样实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">superTypeof</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">typeof</span> val<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res <span class="token operator">=</span> <span class="token string">&quot;null&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res <span class="token operator">=</span> <span class="token string">&quot;array&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="object-prototype-tostring-call-obj" tabindex="-1"><a class="header-anchor" href="#object-prototype-tostring-call-obj" aria-hidden="true">#</a> <code>Object.prototype.toString.call(obj)</code></h2><blockquote><p>当 <code>Array.isArray()</code> 不可用时，MDN 做了如下的补丁，因此说明 MDN 推荐使用 <code>Object.prototype.toString.call(obj)</code> 检测数据类型。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span>isArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Array<span class="token punctuation">.</span><span class="token function-variable function">isArray</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[Object Array]&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要判断所有类型，那么可以调用对象原型中的 <code>toString()</code> 方法，<code>Object.prototype.toString.call(obj)</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">_getClass</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&quot;null&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31),p=[t];function c(l,i){return s(),a("div",null,p)}const d=n(o,[["render",c],["__file","0010、判断数据类型.html.vue"]]);export{d as default};

import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as d,c as p,a as n,b as e,e as s,w as a,f as o}from"./app-9ee26c46.js";const u="/blog/assets/image/frontend/basic/css/003/box.png",r="/blog/assets/image/frontend/basic/css/003/normal-box.png",g="/blog/assets/image/frontend/basic/css/003/abnormal-box.png",h={},b=o('<h2 id="盒模型" tabindex="-1"><a class="header-anchor" href="#盒模型" aria-hidden="true">#</a> 盒模型</h2><p>所有的 HTML 元素都可以看作一个盒子，他由外边距 <code>margin</code>、边框 <code>border</code>、内边距 <code>padding</code>和内容区 <code>content</code> 组成。</p><figure><img src="'+u+'" alt="盒模型" tabindex="0" loading="lazy"><figcaption>盒模型</figcaption></figure><h2 id="标准盒模型和怪异盒模型" tabindex="-1"><a class="header-anchor" href="#标准盒模型和怪异盒模型" aria-hidden="true">#</a> 标准盒模型和怪异盒模型</h2>',4),k=o('<p>他们表现在盒模型中差异：</p><ul><li>标准盒模型：<code>width</code> 和 <code>height</code> 的计算值都不包含 <code>border</code> 和 <code>padding</code>，而只会应用到这个元素的 <code>content</code>。</li></ul><figure><img src="'+r+'" alt="标准盒模型" width="50%" height="50%" tabindex="0" loading="lazy"><figcaption>标准盒模型</figcaption></figure><ul><li>怪异盒模型：<code>width</code> 和 <code>height</code> 属性包括 <code>content</code>、<code>padding</code> 和 <code>border</code>，不算 <code>margin</code>。</li></ul><figure><img src="'+g+`" alt="怪异盒模型" width="50%" height="50%" tabindex="0" loading="lazy"><figcaption>怪异盒模型</figcaption></figure><h2 id="box-sizing" tabindex="-1"><a class="header-anchor" href="#box-sizing" aria-hidden="true">#</a> box-sizing</h2><p>在 CSS 中，可以设置 <code>box-sizing</code> 属性来设置盒子模型。语法如下：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box|border-box|inherit<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>content-box</code>：标准盒模型；</li><li><code>border-box</code>：怪异盒模型；</li><li><code>inherit</code>：规定应从父元素继承 <code>box-sizing</code> 属性的值。</li></ul><p>一般希望将 <code>box-sizing</code> 设置为 <code>border-box</code>，能使我们更容易地设定一个元素的宽高：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">*</span> <span class="token punctuation">{</span>
  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="块级盒子和内联盒子" tabindex="-1"><a class="header-anchor" href="#块级盒子和内联盒子" aria-hidden="true">#</a> 块级盒子和内联盒子</h2><p>CSS 中的盒子有三种表现形式 —— 块级盒子（block box）、内联盒子（inline box）和行内块盒子（inline-block box）。这两种盒子在文档流中会表现出不一样的行为。</p><p>可以通过对盒子 <code>display</code> 属性的设置，比如 <code>inline</code>、 <code>block</code> 或 <code>inline-block</code>，来控制盒子的外部显示类型。</p><h3 id="块级盒子" tabindex="-1"><a class="header-anchor" href="#块级盒子" aria-hidden="true">#</a> 块级盒子</h3><p>一个被定义成块级的（block）盒子会表现出以下行为：</p><ul><li>盒子会在内联的方向上扩展并占据父容器在该方向上的所有可用空间，在绝大数情况下意味着盒子会和父容器一样宽。</li><li>每个盒子都会换行。</li><li><code>width</code> 和 <code>height</code> 属性可以发挥作用。</li><li>内边距（<code>padding</code>）, 外边距（<code>margin</code>）和 边框（<code>border</code>）会将其他元素从当前盒子周围「推开」。</li></ul><p>除非特殊指定，诸如标题 (<code>&lt;h1&gt;</code>等) 和段落 (<code>&lt;p&gt;</code>) 默认情况下都是块级的盒子。</p>`,18),m=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),e("h3")]),n("span",{class:"token punctuation"},">")]),e("块级盒子一"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),e("h3")]),n("span",{class:"token punctuation"},">")]),e(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),e("p")]),n("span",{class:"token punctuation"},">")]),e("块级盒子二"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),e("p")]),n("span",{class:"token punctuation"},">")]),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-css line-numbers-mode","data-ext":"css"},[n("pre",{class:"language-css"},[n("code",null,[n("span",{class:"token selector"},"h3, p"),e(),n("span",{class:"token punctuation"},"{"),e(`
  `),n("span",{class:"token property"},"border"),n("span",{class:"token punctuation"},":"),e(" 1px solid black"),n("span",{class:"token punctuation"},";"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=o('<h3 id="内联盒子" tabindex="-1"><a class="header-anchor" href="#内联盒子" aria-hidden="true">#</a> 内联盒子</h3><p>如果一个盒子对外显示为 <code>inline</code>，那么他的行为如下：</p><ul><li>盒子不会产生换行。</li><li><code>width</code> 和 <code>height</code> 属性将不起作用。</li><li>垂直方向的内边距、外边距以及边框会被应用但是不会把其他处于 <code>inline</code> 状态的盒子「推开」。</li><li>水平方向的内边距、外边距以及边框会被应用且会把其他处于 <code>inline</code> 状态的盒子「推开」。</li></ul><p>用做链接的 <code>&lt;a&gt;</code> 元素、<code>&lt;span&gt;</code>、<code>&lt;em&gt;</code> 以及 <code>&lt;strong&gt;</code> 都是默认处于 <code>inline</code> 状态的。</p>',4),_=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),e("a")]),n("span",{class:"token punctuation"},">")]),e("内联盒子一"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),e("a")]),n("span",{class:"token punctuation"},">")]),e(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),e("em")]),n("span",{class:"token punctuation"},">")]),e("内联盒子二"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),e("em")]),n("span",{class:"token punctuation"},">")]),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=n("div",{class:"language-css line-numbers-mode","data-ext":"css"},[n("pre",{class:"language-css"},[n("code",null,[n("span",{class:"token selector"},"a, em"),e(),n("span",{class:"token punctuation"},"{"),e(`
  `),n("span",{class:"token property"},"border"),n("span",{class:"token punctuation"},":"),e(" 1px solid black"),n("span",{class:"token punctuation"},";"),e(`
  `),n("span",{class:"token property"},"width"),n("span",{class:"token punctuation"},":"),e(" 10px"),n("span",{class:"token punctuation"},";"),e(`
  `),n("span",{class:"token property"},"height"),n("span",{class:"token punctuation"},":"),e(" 10px"),n("span",{class:"token punctuation"},";"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=o('<h3 id="行内块盒子" tabindex="-1"><a class="header-anchor" href="#行内块盒子" aria-hidden="true">#</a> 行内块盒子</h3><p><code>display</code> 有一个特殊的值，它在内联和块之间提供了一个中间状态。这对于以下情况非常有用：您不希望一个项切换到新行，但希望它可以设定宽度和高度，并避免上面看到的重叠。</p><p>一个元素使用 <code>display: inline-block</code>，实现我们需要的块级的部分效果：</p><ul><li>设置 <code>width</code> 和 <code>height</code> 属性会生效。</li><li><code>padding</code>, <code>margin</code>, 以及 <code>border</code> 会推开其他元素。</li></ul><p>但是，它不会跳转到新行，如果显式添加 <code>width</code> 和 <code>height</code> 属性，它只会变得比其内容更大。</p>',5),C=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),e("h3")]),n("span",{class:"token punctuation"},">")]),e("行内块盒子一"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),e("h3")]),n("span",{class:"token punctuation"},">")]),e(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),e("a")]),n("span",{class:"token punctuation"},">")]),e("行内块盒子二"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),e("a")]),n("span",{class:"token punctuation"},">")]),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=n("div",{class:"language-css line-numbers-mode","data-ext":"css"},[n("pre",{class:"language-css"},[n("code",null,[n("span",{class:"token selector"},"h3, a"),e(),n("span",{class:"token punctuation"},"{"),e(`
  `),n("span",{class:"token property"},"border"),n("span",{class:"token punctuation"},":"),e(" 1px solid black"),n("span",{class:"token punctuation"},";"),e(`
  `),n("span",{class:"token property"},"display"),n("span",{class:"token punctuation"},":"),e(" inline-block"),n("span",{class:"token punctuation"},";"),e(`
  `),n("span",{class:"token property"},"width"),n("span",{class:"token punctuation"},":"),e(" 150px"),n("span",{class:"token punctuation"},";"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1);function U(w,A){const i=t("RouterLink"),c=t("CodeDemo");return d(),p("div",null,[b,n("p",null,[e("在 "),s(i,{to:"/frontend/basic/html/003-doctype.html"},{default:a(()=>[e("DOCTYPE")]),_:1}),e(" 中提到了浏览器的渲染模式，现代的浏览器一般都有两种渲染模式：标准模式和怪异模式。")]),k,s(c,{id:"code-demo-106",type:"normal",title:"block",code:"eJyrVsooyc1RslKyyTC2ezp3+vNdy5/PnvR07YQnOxps9IFiMXk2BagSu3ps9AuA4ko6SsnFxUCtGcY6CgUK1TF5CgpJ+UUpqUVWCoYFFQrF+TmZKQpJOYnJ2dYxebVADbUA7osunA=="},{default:a(()=>[m,x]),_:1}),v,s(c,{id:"code-demo-141",type:"normal",title:"inline",code:"eJyrVsooyc1RslKySbR72tb6onHK89mTnq6d8GRHg41+ol1Mnk1qLqrErh4bfaBYTJ6SjlJycTFQa6KOQmquQnVMnoJCUn5RSmqRlYJhQYVCcX5OZopCUk5icrY1SK48M6UkAyhlUFAB5mekZqZnlMAFaoEm1gIAZGo4lQ=="},{default:a(()=>[_,f]),_:1}),y,s(c,{id:"code-demo-169",type:"normal",title:"inline-blocl",code:"eJyrVsooyc1RslKyyTC2e7Gw52lb69O505/PnvR07YQnOxps9IHCMXk2iRhyu3ps9BOBUko6SsnFxUADMox1FBIVqmPyFBSS8otSUousFAwLKhSK83MyUxSSchKTs61BcimZxQU5iZVWCpl5OZl5qbpJOflQmfLMlJIMoCZTg4IKoEAt0OxaAPlIQHI="},{default:a(()=>[C,S]),_:1})])}const z=l(h,[["render",U],["__file","003-box-model.html.vue"]]);export{z as default};

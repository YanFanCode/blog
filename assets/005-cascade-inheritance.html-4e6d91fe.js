import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o,c as s,a as e,b as t,e as a,w as l,f as n}from"./app-b8756f2c.js";const h={},p={class:"hint-container tip"},u=e("p",{class:"hint-container-title"},"W3C 规范",-1),x={href:"https://www.w3.org/TR/2021/REC-css-cascade-3-20210211",target:"_blank",rel:"noopener noreferrer"},f=e("p",null,[t("CSS 的基本设计原则之一是 "),e("a",{href:"#%E5%B1%82%E5%8F%A0"},"层叠"),t("，它允许多个样式表影响文档的表示。")],-1),_=e("p",null,"当不同的声明尝试为同一元素设置值时，必须以某种方式解决冲突。",-1),g=e("p",null,[t("而在默认情况下，若没有声明为元素设置值时，则会通过 "),e("a",{href:"#%E7%BB%A7%E6%89%BF"},"继承"),t(" 或使用属性的默认值来计算最终的结果。")],-1),E={class:"hint-container info"},b=e("p",{class:"hint-container-title"},"相关信息",-1),y=n('<h2 id="值的计算过程" tabindex="-1"><a class="header-anchor" href="#值的计算过程" aria-hidden="true">#</a> 值的计算过程</h2><p>一旦浏览器将 HTML 文档解析并生成了 DOM Tree，那么必须给每一个元素都设置对应的样式。</p><p>最终的 CSS 属性值会经过多个步骤的计算：</p><ul><li>首先，收集每个元素上每一个属性应用的所有 <a href="#%E5%A3%B0%E6%98%8E%E5%80%BC-declared-values">声明值</a>；</li><li>层叠产生 <a href="#%E5%B1%82%E5%8F%A0%E5%80%BC-cascaded-values">层叠值</a>，每个元素的每个属性最多有一个层叠值；</li><li>默认值将产生 <a href="#%E6%8C%87%E5%AE%9A%E5%80%BC-specified-values">指定值</a>，每个元素的每个属性正好有一个指定值；</li><li>解析值的依赖关系将产生 <a href="#%E8%AE%A1%E7%AE%97%E5%80%BC-computed-values">计算值</a>，每个元素的每个属性正好有一个计算值；</li><li>格式化文档会生成 <a href="#%E4%BD%BF%E7%94%A8%E5%80%BC-used-values">使用值</a>，一个元素只有在一个给定的属性适用于该元素时才具有该属性的使用值； <blockquote><p>我的理解是：若一个元素没有该属性，则没有使用值。</p></blockquote></li><li>最后，根据显示环境的不同，将使用值转换为 <a href="#%E5%AE%9E%E9%99%85%E5%80%BC-actual-values">实际值</a>。与使用值一样，元素上的给定属性可能有也可能没有实际值。</li></ul><h3 id="声明值-declared-values" tabindex="-1"><a class="header-anchor" href="#声明值-declared-values" aria-hidden="true">#</a> 声明值 Declared Values</h3><p>每个应用于元素的属性声明都会给该属性提供一个声明值，这些值会被层叠处理以选择一个单一的「获胜值」。</p><h3 id="层叠值-cascaded-values" tabindex="-1"><a class="header-anchor" href="#层叠值-cascaded-values" aria-hidden="true">#</a> 层叠值 Cascaded Values</h3><p>层叠值代表层叠的结果：它是赢得层叠的声明值（在层叠的输出中被排序在前面）。如果层叠的输出是一个空列表，那就没有层叠值。</p><h3 id="指定值-specified-values" tabindex="-1"><a class="header-anchor" href="#指定值-specified-values" aria-hidden="true">#</a> 指定值 Specified Values</h3><p>指定值是一个给定的属性值，是样式表作者为该元素设置的。它是把层叠值通过默认过程处理的结果，保证每个元素上的每个属性都有一个指定的值。</p><p>在许多情况下，指定值是层叠的值。然而，如果根本没有层叠值，那么就会取默认的值。</p><h3 id="计算值-computed-values" tabindex="-1"><a class="header-anchor" href="#计算值-computed-values" aria-hidden="true">#</a> 计算值 Computed Values</h3><p>计算值是对指定值进行解析的结果，通常是将其绝对化以准备继承。</p><div class="hint-container tip"><p class="hint-container-title">注意</p><p>计算值是在继承过程中父代传递给子代的值。由于历史原因，它不一定是 <code>getComputedStyle()</code> 函数返回的值，该函数有可能会返回 <a href="#%E4%BD%BF%E7%94%A8%E5%80%BC-used-values">使用值</a>。<code>CSSOM</code> 除外，计算值是一个抽象的数据表示：它们的定义反映了该数据表示，而不是该数据如何被序列化。例如，序列化规则通常允许省略某些在解析过程中隐含的值，但这些值仍然是计算值的一部分。</p></div><div class="hint-container info"><p class="hint-container-title">EXAMPLE</p><p>一个指定的值可以是绝对的（如 <code>red</code> 或 <code>2px</code>），也可以是相对的（如 <code>auto</code>、<code>2em</code>）。计算一个相对值通常会将其绝对化：</p><ul><li>相对单位的值（<code>em</code>、<code>ex</code>、<code>vh</code>、<code>vw</code>）必须通过与合适的参考尺寸相乘而成为绝对值</li><li>某些关键字（如 <code>smaller</code>、<code>bloder</code>）必须根据其定义进行替换</li><li>某些属性的百分比必须乘以一个参考值（由属性定义）</li><li>有效的相对 URL 必须被解析为绝对值</li></ul></div><div class="hint-container tip"><p class="hint-container-title">注意</p><p>一般来说，计算值会尽可能地解析指定值，而不需要执行其他难以并行的操作，例如解析网络请求或从元素和它的父级元素以外的地方检索值。</p></div><p>即使该属性不适用，计算值也会存在。然而一些属性可能会根据该属性是否适用于该元素而改变它们确定计算值的方式。</p><h3 id="使用值-used-values" tabindex="-1"><a class="header-anchor" href="#使用值-used-values" aria-hidden="true">#</a> 使用值 Used Values</h3><p>使用值是将计算值和完成任何剩余计算的结果，使其成为文档格式化中使用的绝对理论值。</p><div class="hint-container info"><p class="hint-container-title">EXAMPLE</p><p>比如，在不知道该元素的祖先布局的情况下，<code>width: auto</code> 声明不能被解析为一个长度，所以计算值是 <code>auto</code>，而使用值是一个绝对长度，如 <code>100px</code>。</p></div><p>如果一个属性不适用于这个元素或盒子类型，那么它对该类型的盒子或元素没有直接的格式化效果，因此对该属性没有使用值。</p><div class="hint-container info"><p class="hint-container-title">EXAMPLE</p><p>例如，<code>flex</code> 属性在不是 <code>flex</code> 项目的元素上没有使用值。</p></div><div class="hint-container tip"><p class="hint-container-title">注意</p><p>定义为适用于「所有元素」的属性适用于所有元素和显示类型，但不一定适用于所有伪元素类型，因为伪元素通常有自己的特定渲染模型或其他限制。然而，<code>::before</code> 和 <code>::after</code> 伪元素被定义为几乎完全像普通元素一样，因此被定义为接受所有适用于「所有元素」的属性。</p></div><h3 id="实际值-actual-values" tabindex="-1"><a class="header-anchor" href="#实际值-actual-values" aria-hidden="true">#</a> 实际值 Actual Values</h3><p>原则上，一个使用值是可以被使用的，但是用户代理可能无法在特定的环境中使用这个值。</p><p>例如，用户代理可能只能呈现整数像素宽度的边框，因此必须近似宽度的使用值。</p><p>另外，一个元素的字体大小可能需要根据字体的可用性和字体大小调整属性的值来调整。</p><p>实际值就是进行此类调整后的使用值。</p><h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h3>',29),w={href:"https://www.w3.org/TR/2021/REC-css-cascade-3-20210211/#stages-examples",target:"_blank",rel:"noopener noreferrer"},v=n('<table><thead><tr><th style="text-align:center;">属性</th><th style="text-align:center;">获胜值</th><th style="text-align:center;">层叠值</th><th style="text-align:center;">指定值</th><th style="text-align:center;">计算值</th><th style="text-align:center;">使用值</th><th style="text-align:center;">实际值</th></tr></thead><tbody><tr><td style="text-align:center;"><code>text-align</code></td><td style="text-align:center;"><code>text-align: left</code></td><td style="text-align:center;"><code>left</code></td><td style="text-align:center;"><code>left</code></td><td style="text-align:center;"><code>left</code></td><td style="text-align:center;"><code>left</code></td><td style="text-align:center;"><code>left</code></td></tr><tr><td style="text-align:center;"><code>width</code></td><td style="text-align:center;">(none)</td><td style="text-align:center;">(none)</td><td style="text-align:center;"><code>auto</code>（继承的值）</td><td style="text-align:center;"><code>auto</code></td><td style="text-align:center;"><code>120px</code></td><td style="text-align:center;"><code>120px</code></td></tr><tr><td style="text-align:center;"><code>border-width</code></td><td style="text-align:center;"><code>border-width: inherit</code></td><td style="text-align:center;"><code>inherit</code></td><td style="text-align:center;"><code>4.2px</code></td><td style="text-align:center;"><code>4.2px</code></td><td style="text-align:center;"><code>4.2px</code></td><td style="text-align:center;"><code>4px</code></td></tr><tr><td style="text-align:center;"><code>font-size</code></td><td style="text-align:center;"><code>font-size: 1.2em</code></td><td style="text-align:center;"><code>1.2em</code></td><td style="text-align:center;"><code>1.2em</code></td><td style="text-align:center;"><code>14.1px</code></td><td style="text-align:center;"><code>14.1px</code></td><td style="text-align:center;"><code>14px</code></td></tr><tr><td style="text-align:center;"><code>width</code></td><td style="text-align:center;"><code>width: 80%</code></td><td style="text-align:center;"><code>80%</code></td><td style="text-align:center;"><code>80%</code></td><td style="text-align:center;"><code>80%</code></td><td style="text-align:center;"><code>354.2px</code></td><td style="text-align:center;"><code>354px</code></td></tr></tbody></table><h2 id="层叠" tabindex="-1"><a class="header-anchor" href="#层叠" aria-hidden="true">#</a> 层叠</h2><p>层叠接收一个无序的列表，该列表是给定元素上给定属性的声明值，按照下面确定的声明优先级对它们进行排序，然后输出一个单一的 <a href="#%E5%B1%82%E5%8F%A0%E5%80%BC-cascaded-values">层叠值</a>。</p><h3 id="层叠排列顺序" tabindex="-1"><a class="header-anchor" href="#层叠排列顺序" aria-hidden="true">#</a> 层叠排列顺序</h3><p>层叠根据以下标准对声明进行排序，其优先级由高到低排列：</p><h4 id="起源和重要性" tabindex="-1"><a class="header-anchor" href="#起源和重要性" aria-hidden="true">#</a> 起源和重要性</h4><p>一个声明的起源是基于它的来源，而它的重要性是指它是否用 <code>!important</code> 声明（见 <a href="#%E9%87%8D%E8%A6%81%E5%A3%B0%E6%98%8E-important-%E6%B3%A8%E9%87%8A">下文</a>）。各种起源的优先级按降序排列如下：</p>',7),C={href:"https://www.w3.org/TR/2021/REC-css-cascade-3-20210211/#biblio-css-transitions-1",target:"_blank",rel:"noopener noreferrer"},m=e("li",null,"重要的用户代理声明",-1),S=e("li",null,"重要的用户声明",-1),B=e("li",null,"重要的作者声明",-1),A={href:"https://www.w3.org/TR/2021/REC-css-cascade-3-20210211/#biblio-css-animations-1",target:"_blank",rel:"noopener noreferrer"},R=e("li",null,"正常的作者声明",-1),k=e("li",null,"正常的用户声明",-1),T=e("li",null,"正常的用户代理声明",-1),L=e("p",null,"来自这个列表中较早起源的声明胜过来自较晚起源的声明。",-1),M=e("h4",{id:"特异性",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#特异性","aria-hidden":"true"},"#"),t(" 特异性")],-1),V={href:"https://www.w3.org/TR/selectors-3/#specificity",target:"_blank",rel:"noopener noreferrer"},F=n('<h4 id="出现顺序" tabindex="-1"><a class="header-anchor" href="#出现顺序" aria-hidden="true">#</a> 出现顺序</h4><p>文档中最后一个出现的声明获胜。这是为了：</p><ul><li>来自导入的样式表的声明被排序，就像它们的样式表被替换成了 <code>@import</code> 规则。</li><li>来自独立于原生文档的样式表的声明被视为按照链接顺序连接起来的，由主文档语言决定。</li><li>来自样式属性的声明是根据样式属性出现的元素的文档顺序来排序的，并且都放在任何样式表之后。</li></ul><p><strong>级联的输出</strong>是一个（可能是空的）排序的列表，其中包括每个元素上的每个属性的声明值。</p><h3 id="层叠来源" tabindex="-1"><a class="header-anchor" href="#层叠来源" aria-hidden="true">#</a> 层叠来源</h3><p>每个样式规则都有一个级联原点，它决定了它在哪里进入级联。CSS定义了三个核心原点：</p><h5 id="作者起源" tabindex="-1"><a class="header-anchor" href="#作者起源" aria-hidden="true">#</a> 作者起源</h5><p>作者根据文档语言的惯例为一个源文档指定样式表。例如，在HTML中，样式表可以包含在文档中，也可以从外部链接。</p><h5 id="用户起源" tabindex="-1"><a class="header-anchor" href="#用户起源" aria-hidden="true">#</a> 用户起源</h5><p>用户可能能够为一个特定的文档指定样式信息。例如，用户可以指定一个包含样式表的文件，或者用户代理可以提供一个生成用户样式表的界面（或者表现得像它一样）。</p><h5 id="用户代理的起源" tabindex="-1"><a class="header-anchor" href="#用户代理的起源" aria-hidden="true">#</a> 用户代理的起源</h5><p>符合要求的用户代理必须应用一个默认的样式表（或者表现得像他们一样）。一个用户代理的默认样式表应该以满足文档语言的一般表现期望的方式呈现文档语言的元素（例如，对于视觉浏览器，HTML中的EM元素使用斜体字呈现）。例如，见HTML用户代理样式表。[HTML]</p><p>对CSS的扩展定义了以下额外的起源：</p><h5 id="动画起源" tabindex="-1"><a class="header-anchor" href="#动画起源" aria-hidden="true">#</a> 动画起源</h5>',14),D={href:"https://www.w3.org/TR/2021/REC-css-cascade-3-20210211/#biblio-css-animations-1",target:"_blank",rel:"noopener noreferrer"},H=e("h5",{id:"过渡起源",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#过渡起源","aria-hidden":"true"},"#"),t(" 过渡起源")],-1),N={href:"https://www.w3.org/TR/2021/REC-css-cascade-3-20210211/#biblio-css-transitions-1",target:"_blank",rel:"noopener noreferrer"},q=n('<h3 id="重要声明-important-注释" tabindex="-1"><a class="header-anchor" href="#重要声明-important-注释" aria-hidden="true">#</a> 重要声明： <code>!important</code> 注释</h3><p>CSS 试图在作者和用户的样式表之间建立一种权力平衡。</p><p>默认情况下，作者的样式表中的规则优先于用户的样式表中的规则，而用户的样式表又优先于用户代理的默认样式表中的规则。</p><p>为了平衡这一点，一个声明可以被标记为重要的，这将增加它在级联中的权重并颠倒优先顺序。</p><p>一个重要的声明优先于一个普通的声明。作者和用户的样式表都可以包含重要声明，用户源的重要声明优先于作者源的重要声明。</p><p>这个CSS特性通过让有特殊要求的用户（大字体、颜色组合等）控制表现形式来提高文档的可访问性。</p><p>所有来源的重要声明都优先于动画的声明。这允许作者在重要情况下覆盖动画值。(动画值通常优先于所有其他规则)。</p><p>用户代理样式表也可能包含重要的声明。这些声明覆盖了所有作者和用户的声明。</p><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h2><p>当级联不产生一个值时，必须以其他方式找到指定的值。</p><p>继承的属性通过继承从它们的父元素中获取它们的默认值；所有其它的属性都采取它们的初始值。</p><p>作者可以通过inherit和initial关键字明确要求继承或初始化。</p><h3 id="初始值" tabindex="-1"><a class="header-anchor" href="#初始值" aria-hidden="true">#</a> 初始值</h3><p>每个属性都有一个初始值，在该属性的定义表中定义。如果该属性不是一个继承的属性，并且级联没有产生一个值，那么该属性的指定值就是其初始值。</p><h3 id="继承性" tabindex="-1"><a class="header-anchor" href="#继承性" aria-hidden="true">#</a> 继承性</h3><p>继承将属性值从父元素传播到它们的子元素。一个元素上的属性的继承值是该元素的父元素上的属性的计算值。对于根元素，它没有父元素，继承值是属性的初始值。</p><p>伪元素根据为每个伪元素描述的虚构的标签序列来继承。</p><p>有些属性是继承的属性，这在其属性定义表中有定义。这意味着，除非层叠的结果是一个值，否则该值将由继承来决定。</p>',18),I={href:"https://www.w3.org/TR/2021/REC-css-cascade-3-20210211/#valdef-all-inherit",target:"_blank",rel:"noopener noreferrer"},P={class:"hint-container tip"},X=e("p",{class:"hint-container-title"},"注意",-1),z={href:"https://www.w3.org/TR/CSS2/visuren.html#box-gen",target:"_blank",rel:"noopener noreferrer"},O=n('<h3 id="明确默认" tabindex="-1"><a class="header-anchor" href="#明确默认" aria-hidden="true">#</a> 明确默认</h3><p>下面定义了几个 CSS 范围内的属性值；声明一个属性拥有这些值，明确地指定了一个特定的默认行为。所有的CSS属性都可以接受这些值。</p><h4 id="重置一个属性-initial-关键字" tabindex="-1"><a class="header-anchor" href="#重置一个属性-initial-关键字" aria-hidden="true">#</a> 重置一个属性：<code>initial</code> 关键字</h4><p>如果一个属性的层叠值是 <code>initial</code> 关键字，那么该属性的 <a href="#%E6%8C%87%E5%AE%9A%E5%80%BC-specified-values">指定值</a> 就是其初始值。</p><h4 id="显式继承-inherit-关键字" tabindex="-1"><a class="header-anchor" href="#显式继承-inherit-关键字" aria-hidden="true">#</a> 显式继承：<code>inherit</code> 关键字</h4><p>如果一个属性的层叠值是 <code>inherit</code> 关键字，那么该属性的指定值和计算值就是继承值。</p><h4 id="擦除所有声明-unset-关键字" tabindex="-1"><a class="header-anchor" href="#擦除所有声明-unset-关键字" aria-hidden="true">#</a> 擦除所有声明：<code>unset</code> 关键字</h4><p>如果一个属性的层叠值是<code> unset</code>关键字，那么如果它是一个继承的属性，这将被视为继承，如果它不是，这将被视为初始。</p><p>这个关键字有效地抹去了在层叠中较早出现的所有声明的值，正确地继承或不继承都适合于该属性（或一个速记的所有长文）。</p>',9);function U(W,j){const d=i("ExternalLinkIcon"),c=i("RouterLink");return o(),s("div",null,[e("div",p,[u,e("p",null,[e("a",x,[t("REC-css-cascade-3"),a(d)]),t("。")])]),f,_,g,e("div",E,[b,e("p",null,[t("与层叠密切相关的概念是 "),a(c,{to:"/frontend/basic/css/002-selector.md/#%E4%BC%98%E5%85%88%E7%BA%A7"},{default:l(()=>[t("优先级")]),_:1}),t("。")])]),y,e("blockquote",null,[e("p",null,[t("完整例子见 "),e("a",w,[t("Examples"),a(d)])])]),v,e("ol",null,[e("li",null,[t("过渡声明 "),e("a",C,[t("css-transitions-1"),a(d)])]),m,S,B,e("li",null,[t("动画声明 "),e("a",A,[t("css-animations-1"),a(d)])]),R,k,T]),L,M,e("p",null,[t("选择器模块 "),e("a",V,[t("Calculating a selector's specificity"),a(d)]),t(" 描述了如何计算一个选择器的特异性。具有最高特异性的声明获胜。")]),F,e("p",null,[t("CSS动画 "),e("a",D,[t("css-animations-1"),a(d)]),t(' 在运行时产生代表其效果的 "虚拟 "规则。')]),H,e("p",null,[t("与CSS动画一样，CSS过渡 "),e("a",N,[t("css-transitions-1"),a(d)]),t(' 在运行时产生代表其效果的 "虚拟 "规则。')]),q,e("p",null,[t("一个属性也可以明确地被继承。参见 "),e("a",I,[t("继承关键字"),a(d)]),t("。")]),e("div",P,[X,e("p",null,[t("继承遵循文档树，不被 "),e("a",z,[t("匿名盒子"),a(d)]),t(" 拦截，也不被盒子树的其他操作所影响。")])]),O])}const K=r(h,[["render",U],["__file","005-cascade-inheritance.html.vue"]]);export{K as default};

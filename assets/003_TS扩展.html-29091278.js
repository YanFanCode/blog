import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,f as e}from"./app-4c45a663.js";const p={},t=e(`<h2 id="typescript-模块化" tabindex="-1"><a class="header-anchor" href="#typescript-模块化" aria-hidden="true">#</a> TypeScript 模块化</h2><p>TS 最主要使用的模块化方案就是 ES module</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入类型前缀可加 type 声明导入的是一个类型，利于编译优化</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> type Ikun <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;xxxxx&#39;</span>
<span class="token keyword">import</span> type <span class="token punctuation">{</span> Ikun <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;xxxxx&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型的查找" tabindex="-1"><a class="header-anchor" href="#类型的查找" aria-hidden="true">#</a> 类型的查找</h2><ul><li>内部类型声明（全局安装 ts 包自带类型声明文件）</li><li>外部定义类型声明</li><li>自己定义类型声明</li></ul><h2 id="自定义声明" tabindex="-1"><a class="header-anchor" href="#自定义声明" aria-hidden="true">#</a> 自定义声明</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 全局的数据方便在任何地方使用，可以自定义声明类型</span>
<span class="token comment">// 自定义声明类型不可赋值，方法也不写实现体</span>
declare <span class="token keyword">const</span> <span class="token literal-property property">xxxx</span><span class="token operator">:</span> string
declare <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">bar</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> string
declare <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> string
  <span class="token literal-property property">age</span><span class="token operator">:</span> number
  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 引入外部文件时，需要声明文件模块</span>
<span class="token comment">// 需要在webpack配置对应插件处理</span>
declare module <span class="token string">&#39;*.jpg&#39;</span>
declare module <span class="token string">&#39;*.pdf&#39;</span>
declare module <span class="token string">&#39;*.gif&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="条件类型" tabindex="-1"><a class="header-anchor" href="#条件类型" aria-hidden="true">#</a> 条件类型</h2><h3 id="条件类型的基本使用" tabindex="-1"><a class="header-anchor" href="#条件类型的基本使用" aria-hidden="true">#</a> 条件类型的基本使用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 类似于js中的三元表达式</span>

type Ikun <span class="token operator">=</span> string <span class="token operator">|</span> number

<span class="token keyword">const</span> res <span class="token operator">=</span> string <span class="token keyword">extends</span> <span class="token class-name">Ikun</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 结果为true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在条件类型中推断-infer" tabindex="-1"><a class="header-anchor" href="#在条件类型中推断-infer" aria-hidden="true">#</a> 在条件类型中推断(infer)</h3><blockquote><p>tips: 条件类型中提供了 infer 关键字 ，可以从正在比较的类型中推断类型，然后在 true 的分支中引用推断结果</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 过于抽象，结合官方文档理解。</span>
type <span class="token function-variable function">CalcFnType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">num1</span><span class="token operator">:</span> nubmer<span class="token punctuation">,</span> <span class="token literal-property property">num2</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> number

type YFReturnType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> infer <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> never
type CaclReturnType <span class="token operator">=</span> YFReturnType<span class="token operator">&lt;</span>CalcFnType<span class="token operator">&gt;</span>

type CaclParamsters<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>srgs<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> infer <span class="token constant">P</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> never
type CaclParamsType <span class="token operator">=</span> CaclParamsters<span class="token operator">&lt;</span>CalcFnType<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分发条件类型" tabindex="-1"><a class="header-anchor" href="#分发条件类型" aria-hidden="true">#</a> 分发条件类型</h3><blockquote><p>tips: 当在泛型中使用条件类型的时候，如果传入一个联合类型，就会变成一个分发的</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>type toArray<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span> <span class="token operator">?</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> never

<span class="token comment">// number[] string[]</span>
<span class="token keyword">const</span> NewType <span class="token operator">=</span> toArray<span class="token operator">&lt;</span>number <span class="token operator">|</span> string<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),o=[t];function r(c,l){return n(),a("div",null,o)}const k=s(p,[["render",r],["__file","003_TS扩展.html.vue"]]);export{k as default};

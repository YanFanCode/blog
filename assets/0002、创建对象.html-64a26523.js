const e=JSON.parse('{"key":"v-a1b08c88","path":"/frontend/basic/javascript/0002%E3%80%81%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1.html","title":"JavaScript 类（一）———— 创建对象","lang":"zh-CN","frontmatter":{"title":"JavaScript 类（一）———— 创建对象","date":"2022-08-25T00:00:00.000Z","category":["JavaScript"],"tag":["面向对象"],"description":"在 JavaScript 中使用 class 时，可以很方便地创建类和继承，然而在 ES6 之前的规范中，是使用构造函数和基于原型的继承模式，而 class 仅仅是它们的语法糖。因此在了解 ES6 class 之前，有必要了解以前模拟类和继承的方法。 首先来看看在 JavaScript 中是如何创建一个对象的。 工厂模式 工厂模式是一种常见的设计模式，...","head":[["meta",{"property":"og:url","content":"https://yanfancode.github.io/blog/blog/frontend/basic/javascript/0002%E3%80%81%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1.html"}],["meta",{"property":"og:site_name","content":"My Konwledge Base"}],["meta",{"property":"og:title","content":"JavaScript 类（一）———— 创建对象"}],["meta",{"property":"og:description","content":"在 JavaScript 中使用 class 时，可以很方便地创建类和继承，然而在 ES6 之前的规范中，是使用构造函数和基于原型的继承模式，而 class 仅仅是它们的语法糖。因此在了解 ES6 class 之前，有必要了解以前模拟类和继承的方法。 首先来看看在 JavaScript 中是如何创建一个对象的。 工厂模式 工厂模式是一种常见的设计模式，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-31T09:43:34.000Z"}],["meta",{"property":"article:author","content":"yanfan"}],["meta",{"property":"article:tag","content":"面向对象"}],["meta",{"property":"article:published_time","content":"2022-08-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-31T09:43:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript 类（一）———— 创建对象\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-25T00:00:00.000Z\\",\\"dateModified\\":\\"2023-08-31T09:43:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yanfan\\",\\"url\\":\\"https://github.com/YanFanCode/blog\\",\\"email\\":\\"2595437938@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"1 工厂模式","slug":"工厂模式","link":"#工厂模式","children":[]},{"level":2,"title":"2 构造函数模式","slug":"构造函数模式","link":"#构造函数模式","children":[]},{"level":2,"title":"3 原型模式","slug":"原型模式","link":"#原型模式","children":[{"level":3,"title":"3.1 隐式原型和显示原型","slug":"隐式原型和显示原型","link":"#隐式原型和显示原型","children":[{"level":4,"title":"3.1.1 隐式原型","slug":"隐式原型","link":"#隐式原型","children":[]},{"level":4,"title":"3.1.2 显式原型","slug":"显式原型","link":"#显式原型","children":[]}]},{"level":3,"title":"3.2 原型模式具体实现过程","slug":"原型模式具体实现过程","link":"#原型模式具体实现过程","children":[]},{"level":3,"title":"3.3 原型模式存在的问题","slug":"原型模式存在的问题","link":"#原型模式存在的问题","children":[]}]},{"level":2,"title":"4 组合使用构造函数和原型模式","slug":"组合使用构造函数和原型模式","link":"#组合使用构造函数和原型模式","children":[]},{"level":2,"title":"5 总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1693475014000,"updatedTime":1693475014000,"contributors":[{"name":"yanfan","email":"2595437938@qq.com","commits":1}]},"readingTime":{"minutes":7.07,"words":2120},"filePathRelative":"frontend/basic/javascript/0002、创建对象.md","localizedDate":"2022年8月25日","excerpt":"","autoDesc":true}');export{e as data};

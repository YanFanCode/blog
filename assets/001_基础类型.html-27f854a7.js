import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-71bf97b4.js";const p="/blog/assets/类型缩小-0ee453bd.png",t={},o=e(`<h2 id="数组类型声明" tabindex="-1"><a class="header-anchor" href="#数组类型声明" aria-hidden="true">#</a> 数组类型声明</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token literal-property property">arr</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bbb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ccc&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> <span class="token literal-property property">arr</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;111&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;222&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;333&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象类型声明" tabindex="-1"><a class="header-anchor" href="#对象类型声明" aria-hidden="true">#</a> 对象类型声明</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 属性与类型一一对应</span>
<span class="token keyword">let</span> <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> number
  <span class="token literal-property property">message</span><span class="token operator">:</span> string
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;kobe&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数类型声明" tabindex="-1"><a class="header-anchor" href="#函数类型声明" aria-hidden="true">#</a> 函数类型声明</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">sum1</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">sum2</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>
  <span class="token keyword">return</span> sum1 <span class="token operator">+</span> sum2
<span class="token punctuation">}</span>
<span class="token comment">// 匿名函数一般没必要添加类型注解，会根据上下文自动推导。称为上下文类型。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="any-类型与-unknown-类型" tabindex="-1"><a class="header-anchor" href="#any-类型与-unknown-类型" aria-hidden="true">#</a> any 类型与 unknown 类型</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// any 代表可以做任何操作</span>
<span class="token comment">// unknown 类型 做任何操作都是违法的</span>
<span class="token keyword">let</span> <span class="token literal-property property">a</span><span class="token operator">:</span> any <span class="token operator">=</span> <span class="token number">123</span>
a <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span> <span class="token comment">// 可以操作</span>

<span class="token keyword">let</span> <span class="token literal-property property">b</span><span class="token operator">:</span> unknown <span class="token operator">=</span> <span class="token string">&#39;aaa&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 操作不允许 需要校验具体类型过后才可以</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> b <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 校验过类型是 string 可以操作</span>
<span class="token punctuation">}</span>
<span class="token comment">// unknown 经过校验缩小类型可以操作，也称之为 类型缩小</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="void-类型" tabindex="-1"><a class="header-anchor" href="#void-类型" aria-hidden="true">#</a> void 类型</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// viod 类型 函数没有任何返回值时，他的返回值类型就是viod类型</span>
type <span class="token function-variable function">FooType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> viod
<span class="token keyword">function</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token function-variable function">FooType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span class="token comment">// 函数明确返回值类型为viod类型时，必须不return 或者 返回undefined类型，推导出返回类型为void的时候，可以返回任意类型。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="never-类型" tabindex="-1"><a class="header-anchor" href="#never-类型" aria-hidden="true">#</a> never 类型</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 永远不会发生值的类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="tuple-元组类型" tabindex="-1"><a class="header-anchor" href="#tuple-元组类型" aria-hidden="true">#</a> tuple 元组类型</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 元组会将类型一一对应存储，元组可以放置不同的数据类型，取出值会有明确类型。</span>
<span class="token keyword">const</span> <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> number<span class="token punctuation">,</span> number<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">]</span>

<span class="token comment">// 数组一般存放相同数据类型，元组可以存放不同数据类型且不会造成数据类型不明确。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="联合类型" tabindex="-1"><a class="header-anchor" href="#联合类型" aria-hidden="true">#</a> 联合类型</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 多个基本类型联合</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">id</span><span class="token operator">:</span> string <span class="token operator">|</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="交叉类型" tabindex="-1"><a class="header-anchor" href="#交叉类型" aria-hidden="true">#</a> 交叉类型</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 表示需要同时满足左右的类型 使用 &amp; 连接</span>
type newType <span class="token operator">=</span> string <span class="token operator">|</span> number <span class="token comment">// 错误示范，此时newTpe为never类型。</span>

<span class="token comment">// 一般交叉两个对象类型使用</span>
<span class="token keyword">interface</span> <span class="token class-name">iKun</span> <span class="token punctuation">{</span>
  name：string
  <span class="token literal-property property">age</span><span class="token operator">:</span> number
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">iKun2</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">coding</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> viod
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token literal-property property">person</span><span class="token operator">:</span> iKun <span class="token operator">&amp;</span> iKun2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;code&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token function-variable function">coding</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型别名" tabindex="-1"><a class="header-anchor" href="#类型别名" aria-hidden="true">#</a> 类型别名</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用type给多种类型起一个别名，方便复用</span>
type MyNumber <span class="token operator">=</span> string <span class="token operator">|</span> number
<span class="token keyword">function</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">ids</span><span class="token operator">:</span> MyNumber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="接口的声明" tabindex="-1"><a class="header-anchor" href="#接口的声明" aria-hidden="true">#</a> 接口的声明</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用interface声明类型</span>
<span class="token keyword">interface</span> <span class="token class-name">person</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> number
  <span class="token literal-property property">name</span><span class="token operator">:</span> string
<span class="token punctuation">}</span>

总结：如果是非对象类型声明建议使用type，如果是对象类型声明建议使用<span class="token keyword">interface</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型断言" tabindex="-1"><a class="header-anchor" href="#类型断言" aria-hidden="true">#</a> 类型断言</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 类型断言可以再ts无法推导具体类型但是我们明确知道是什么类型时，将它转变为我们确定的类型。</span>
<span class="token comment">// 获取DOM元素 &lt;img id=&#39;my-img&#39;/&gt;</span>
<span class="token keyword">const</span> myEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;my-img&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLImageElement
<span class="token comment">// 确定img元素存在且可以拿到，可以断言为HTMLImageElement类型</span>
myEl<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;xxx&#39;</span>

<span class="token comment">// as 只能断言为更为具体的类型或者不太具体的类型</span>
<span class="token keyword">const</span> <span class="token literal-property property">age</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">18</span>
<span class="token keyword">const</span> age1 <span class="token operator">=</span> age <span class="token keyword">as</span> any
<span class="token comment">// ----------------------</span>
<span class="token keyword">const</span> age2 <span class="token operator">=</span> age1 <span class="token keyword">as</span> string
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment">// 扩展 非空类型断言 在访问某个属性时确定有值加入 ！ 使ts不在检测</span>
<span class="token keyword">interface</span> <span class="token class-name">person</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> number
  name<span class="token operator">?</span><span class="token operator">:</span> string
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token literal-property property">iKun</span><span class="token operator">:</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">19</span>
<span class="token punctuation">}</span>
<span class="token comment">// 使用 非空类型断言 强制ts不在检测（危险行为，除非确定一定有，否则这么写）</span>
iKun<span class="token operator">!</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;kobe&#39;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字面量类型" tabindex="-1"><a class="header-anchor" href="#字面量类型" aria-hidden="true">#</a> 字面量类型</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 示例 kobe 字面量就是name的类型</span>
<span class="token keyword">const</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;kobe&#39;</span> <span class="token operator">=</span> <span class="token string">&#39;kobe&#39;</span>

<span class="token comment">// 将多个字面量联合起来</span>
type Direction <span class="token operator">=</span> <span class="token string">&#39;up&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;down&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;left&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;right&#39;</span>
<span class="token keyword">let</span> <span class="token literal-property property">d</span><span class="token operator">:</span> Direction <span class="token operator">=</span> <span class="token string">&#39;up&#39;</span>
<span class="token comment">// d = &#39;aaa&#39; 不允许，必须是字面量中的某一个</span>

<span class="token comment">// 应用示例</span>
type methodType <span class="token operator">=</span> <span class="token string">&#39;get&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;post&#39;</span>
<span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">url</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">method</span><span class="token operator">:</span> methodType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 要求第二个参数传入必须是 get 或者 post</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型缩小" tabindex="-1"><a class="header-anchor" href="#类型缩小" aria-hidden="true">#</a> 类型缩小</h2><figure><img src="`+p+'" alt="类型缩小" tabindex="0" loading="lazy"><figcaption>类型缩小</figcaption></figure>',28),i=[o];function c(l,r){return s(),a("div",null,i)}const k=n(t,[["render",c],["__file","001_基础类型.html.vue"]]);export{k as default};

import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o,c as l,f as d}from"./app-9ee26c46.js";const i={},a=d('<h2 id="一、基本概念" tabindex="-1"><a class="header-anchor" href="#一、基本概念" aria-hidden="true">#</a> 一、基本概念</h2><h3 id="_1-1-flexbox-是什么" tabindex="-1"><a class="header-anchor" href="#_1-1-flexbox-是什么" aria-hidden="true">#</a> 1.1 flexbox 是什么</h3><p>CSS3 的新布局模式，是一种当页面需要适应不同屏幕大小以及设备类型时确保元素拥有恰当的行为的布局方式。</p><p>flex 弹性盒是一个一维布局模型，可以在界面中的项目之间提供空间分布和强大对齐功能的布局方式。</p><p>所谓一维布局模型是指：flex 在同一时刻只控制行或列。这和二维布局模型 Grid Layout （同时控制行和列）相反。</p><h3 id="_1-2-flexbox-的两个轴" tabindex="-1"><a class="header-anchor" href="#_1-2-flexbox-的两个轴" aria-hidden="true">#</a> 1.2 flexbox 的两个轴</h3><p>flexbox 有两个轴——主轴和交叉轴。主轴由 <code>flex-direction</code> 属性定义，而交叉轴和主轴垂直。对 flexbox 做的一切操作都涉及到这两个轴，flexbox 的特点是可以将内容沿着主轴或交叉轴对齐和调整。</p><h3 id="_1-3-起始线和终止线" tabindex="-1"><a class="header-anchor" href="#_1-3-起始线和终止线" aria-hidden="true">#</a> 1.3 起始线和终止线</h3><p>flexbox 不会对文档的书写模式提供假设。过去，CSS 的书写模式主要被认为是水平的，从左到右的。现代的布局方式涵盖了书写模式的范围，所以不再假设一行文字是从文档的左上角开始向右书写, 新的行也不是必须出现在另一行的下面。</p><figure><img src="https://mdn.mozillademos.org/files/15618/Basics5.png" alt="Working in English the start edge is on the left." tabindex="0" loading="lazy"><figcaption>Working in English the start edge is on the left.</figcaption></figure><figure><img src="https://mdn.mozillademos.org/files/15619/Basics6.png" alt="The start edge in a RTL language is on the right." tabindex="0" loading="lazy"><figcaption>The start edge in a RTL language is on the right.</figcaption></figure><h3 id="_1-4-flex-容器和项目" tabindex="-1"><a class="header-anchor" href="#_1-4-flex-容器和项目" aria-hidden="true">#</a> 1.4 flex 容器和项目</h3><p>文档中采用了 flexbox 的区域就叫做 <strong>flex 容器（简称”容器“）</strong>。为了创建容器， 我们把一个容器的 <code>display</code> 属性值改为 <code>flex</code> （块级）或者 <code>inline-flex</code>（行级） 。完成这一步之后，容器中的直系子元素就会变为 <strong>flex 项目（简称“项目”）</strong>。</p><h2 id="二、容器属性" tabindex="-1"><a class="header-anchor" href="#二、容器属性" aria-hidden="true">#</a> 二、容器属性</h2><p>以下都是父元素的属性。</p><ul><li><code>flex-direction</code>：决定主轴方向（即项目的排列方向）</li><li><code>flex-wrap</code>：决定项目是否换行</li><li><code>flex-flow</code>： <code>flex-direction</code> 和 <code>flex-wrap</code> 的简写</li><li><code>justify-content</code>：项目在主轴上的对齐方式</li><li><code>align-items</code>：项目在交叉轴上的对齐方式</li><li><code>align-content</code>：控制多行项目的对齐方式</li></ul><h3 id="_2-1-flex-direction" tabindex="-1"><a class="header-anchor" href="#_2-1-flex-direction" aria-hidden="true">#</a> 2.1 flex-direction</h3><p><code>flex-direction</code> 决定主轴方向、起始线和终止线位置。</p><p>它有四个<strong>取值</strong>：</p><ul><li><code>row</code> （默认）：主轴方向为水平方向，主轴的起始线是左边，终止线是右边</li><li><code>row-reverse</code>：主轴方向为水平方向，主轴的起始线和终止线位置交换</li><li><code>column</code>：主轴方向为垂直方向，主轴的起始线是上边，终止线是下边</li><li><code>column-reverse</code>：主轴方向为垂直方向，主轴的起始线和终止线交换</li></ul><p>使用场景：网页整体布局、导航栏等等</p><h3 id="_2-2-flex-wrap" tabindex="-1"><a class="header-anchor" href="#_2-2-flex-wrap" aria-hidden="true">#</a> 2.2 flex-wrap</h3><p><code>flex-wrap</code> 决定 flex 项目是否换行，可实现多行 flex 容器，这样做时，应把每行都看作一个新的 flex 容器。</p><p>默认情况下子元素是不换行的，如果一条轴线排不下，就可以设置它来换行。</p><p><strong>属性值</strong>：</p><ul><li><code>nowrap</code>（默认）：不换行</li><li><code>wrap</code>：换行，第一行在上方</li><li><code>wrap-reverse</code>：换行，第一行在下方</li></ul><h3 id="_2-3-flex-flow" tabindex="-1"><a class="header-anchor" href="#_2-3-flex-flow" aria-hidden="true">#</a> 2.3 flex-flow</h3><p><code>flex-flow</code> 是 <code>flex-direction</code> 和 <code>flex-wrap</code> 的简写，表示 <code>flex</code> 布局的流动特性。第一个指定的值为 <code>flex-direction</code> ，第二个指定的值为 <code>flex-wrap</code>。默认值当然是 <code>row nowrap</code>。</p><h3 id="_2-4-justify-content" tabindex="-1"><a class="header-anchor" href="#_2-4-justify-content" aria-hidden="true">#</a> 2.4 justify-content</h3><p><code>justify-content</code> 决定项目在<strong>主轴</strong>上的排列（对齐）方式（属性决定了水平方向子项的对齐和分布方式）。</p><p>有以下<strong>取值</strong>：</p><ul><li><code>flex-start</code> （默认值）：起始线对齐（项目从容器的起始线开始排列）</li><li><code>flex-end</code>：终止线对齐（项目从容器的终止线开始排列）</li><li><code>center</code>：居中对齐</li><li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。around是环绕的意思，意思是每个flex子项两侧都环绕互不干扰的等宽的空白间距，最终视觉上边缘两侧的空白只有中间空白宽度一半</li><li><code>space-between</code>：两端对齐，项目之间的间隔都相等，between是中间的意思，意思是多余的空白间距只在元素中间区域分配</li><li><code>space-evenly</code>：均匀分布每个项目，每个flex子项两侧空白间距完全相等，项目之间的间隔和项目与边框之间的间隔相等</li></ul><h3 id="_2-5-align-items" tabindex="-1"><a class="header-anchor" href="#_2-5-align-items" aria-hidden="true">#</a> 2.5 align-items</h3><p><code>align-items</code> 定义项目在<strong>交叉轴</strong>上的排列（对齐）方式。</p><p><strong>取值</strong>：</p><ul><li><p><code>stretch</code>（默认值）：如项目没有设置高度，或者高度为 auto，则占满整个容器</p></li><li><p><code>flex-start</code>：起始线对齐</p></li><li><p><code>flex-end</code>：终止线对齐</p></li><li><p><code>center</code>：居中对齐</p></li><li><p><code>baseline</code>： 项目的第一行文字的基线对齐</p></li></ul><h3 id="_2-6-align-content" tabindex="-1"><a class="header-anchor" href="#_2-6-align-content" aria-hidden="true">#</a> 2.6 align-content</h3><p><code>align-content</code> 用于控制多行项目的对齐方式，如果项目<strong>只有一行则不会起作用</strong>。</p><p><strong>取值</strong>：</p><ul><li><code>stretch</code>（默认值）：即在项目没设置高度，或高度为auto情况下让项目填满整个容器，与align-items类似</li><li><code>flex-start</code>：与交叉轴起始线对齐</li><li><code>flex-end</code>：与交叉轴的终点对齐</li><li><code>center</code>：与交叉轴的中点对齐</li><li><code>space-between</code>：同上</li><li><code>space-around</code>：同上</li><li><code>space-evenly</code>：同上</li></ul><h2 id="三、项目属性" tabindex="-1"><a class="header-anchor" href="#三、项目属性" aria-hidden="true">#</a> 三、项目属性</h2><p>项目属性针对子元素。</p><ul><li><code>order</code>：定义项目的排列顺序</li><li><code>flex-grow</code>：定义项目放大比例</li><li><code>flex-shrink</code>：定义了项目的缩小比例</li><li><code>flex-basis</code>：设置项目宽度</li><li><code>flex</code>：简写属性</li><li><code>align-self</code>：控制单个项目在交叉轴上的排列对齐方式</li></ul><h3 id="_3-1-order" tabindex="-1"><a class="header-anchor" href="#_3-1-order" aria-hidden="true">#</a> 3.1 order</h3><p><code>order</code> 属性定义项目的排列顺序，数值越小，排列越靠前。</p><p><strong>取值</strong>：</p><ul><li>默认为 0，取值为整数</li></ul><h3 id="_3-2-flex-grow" tabindex="-1"><a class="header-anchor" href="#_3-2-flex-grow" aria-hidden="true">#</a> 3.2 flex-grow</h3><p><code>flex-grow</code> 定义项目放大比例，放大的前提是父元素有足够空间。实际上是定义子元素占容器空间的份数。若没定义此属性，则空间按自己本身内容撑开。</p><blockquote><p>grow是扩展的意思，扩展的就是flex子项所占据的宽度，扩展所侵占的空间就是除去元素外的剩余的空白间隙。</p><p>注意：即使设置了固定宽度，若有剩余空间依旧会放大。</p></blockquote><p><strong>取值</strong>：</p><ul><li>默认为0，不放大，取值为数值</li></ul><h3 id="_3-3-flex-shrink" tabindex="-1"><a class="header-anchor" href="#_3-3-flex-shrink" aria-hidden="true">#</a> 3.3 flex-shrink</h3><p><code>flex-shrink</code> 定义项目缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><blockquote><p>注意：即使设置了固定宽度，也会缩小。</p><p>但如果某个项目的 flex-shrink 属性设置为 0 ，即使空间不足，自身也不缩小。</p></blockquote><p><strong>取值</strong>：</p><ul><li>默认为1，正数</li></ul><h3 id="_3-4-flex-basis" tabindex="-1"><a class="header-anchor" href="#_3-4-flex-basis" aria-hidden="true">#</a> 3.4 flex-basis</h3><p>用于设置项目宽度，定义了在分配剩余空间之前元素的默认大小。默认auto时，项目会保持默认宽度，或者以width为自身的宽度，但<strong>如果设置了flex-basis，权重会width属性高，因此会覆盖width属性。</strong></p><blockquote><p>实际上不建议对flex子项使用<code>width</code>属性，因为不够弹性。</p></blockquote><p><strong>取值</strong>：</p><ul><li>默认为 auto</li></ul><h3 id="_3-5-flex" tabindex="-1"><a class="header-anchor" href="#_3-5-flex" aria-hidden="true">#</a> 3.5 flex</h3><p><code>flex</code> 属性是 <code>flex-grow</code> ，<code>flex-shrink</code> 与 <code>flex-basis</code> 三个属性的简写，用于定义项目放大，缩小与宽度。默认为 <code>flex: 0 1 auto</code>；后两个属性值可以简写。</p><p>常用：<code>flex: 1</code> 等分容器空间。</p><h3 id="_3-6-align-self" tabindex="-1"><a class="header-anchor" href="#_3-6-align-self" aria-hidden="true">#</a> 3.6 align-self</h3><p><code>align-self</code> 指控制单独某一个 flex 子项的垂直对齐方式，写在 flex 容器上的这个 <code>align-items</code> 属性，后面是 items，有个 s，表示子项们，是全体；这里是 self，单独一个个体。其他区别不大，语法几乎一样：</p><p><code>align-self: auto | flex-start | flex-end | center | baseline | stretch;</code></p><p>唯一区别就是<code>align-self</code>多了个<code>auto</code>（默认值），表示继承自flex容器的<code>align-items</code>属性值。其他属性值含义一模一样。</p>',69),c=[a];function r(n,t){return o(),l("div",null,c)}const h=e(i,[["render",r],["__file","0002、flex.html.vue"]]);export{h as default};
